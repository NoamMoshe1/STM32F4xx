
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000838  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009c0  080009c8  000109c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080009c0  080009c0  000109c8  2**0
                  CONTENTS
  4 .ARM          00000000  080009c0  080009c0  000109c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009c0  080009c8  000109c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009c0  080009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009c4  080009c4  000109c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000109c8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000109c8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000aa6  00000000  00000000  00010a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000031c  00000000  00000000  000114e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  000118c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001fe0  00000000  00000000  00011954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001068  00000000  00000000  00013934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009485  00000000  00000000  0001499c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001de24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  0001e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080009a8 	.word	0x080009a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080009a8 	.word	0x080009a8

080001c8 <GPIO_PeriClockControl>:
 * @param[in]         - ENABLE or DISABLE macros
 * @return            -  none
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d161      	bne.n	800029e <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a33      	ldr	r2, [pc, #204]	; (80002ac <GPIO_PeriClockControl+0xe4>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001e2:	4b33      	ldr	r3, [pc, #204]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e6:	4a32      	ldr	r2, [pc, #200]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		//TODO
	}
}
 80001ee:	e056      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOB)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a30      	ldr	r2, [pc, #192]	; (80002b4 <GPIO_PeriClockControl+0xec>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80001f8:	4b2d      	ldr	r3, [pc, #180]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a2c      	ldr	r2, [pc, #176]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000204:	e04b      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOC)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a2b      	ldr	r2, [pc, #172]	; (80002b8 <GPIO_PeriClockControl+0xf0>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800020e:	4b28      	ldr	r3, [pc, #160]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000212:	4a27      	ldr	r2, [pc, #156]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
}
 800021a:	e040      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOD)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a27      	ldr	r2, [pc, #156]	; (80002bc <GPIO_PeriClockControl+0xf4>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000224:	4b22      	ldr	r3, [pc, #136]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a21      	ldr	r2, [pc, #132]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000230:	e035      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <GPIO_PeriClockControl+0xf8>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800023a:	4b1d      	ldr	r3, [pc, #116]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800023e:	4a1c      	ldr	r2, [pc, #112]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000246:	e02a      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOF)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <GPIO_PeriClockControl+0xfc>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800025c:	e01f      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOG)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <GPIO_PeriClockControl+0x100>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026a:	4a11      	ldr	r2, [pc, #68]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000272:	e014      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOH)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a15      	ldr	r2, [pc, #84]	; (80002cc <GPIO_PeriClockControl+0x104>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000286:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000288:	e009      	b.n	800029e <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOI)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a10      	ldr	r2, [pc, #64]	; (80002d0 <GPIO_PeriClockControl+0x108>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d105      	bne.n	800029e <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <GPIO_PeriClockControl+0xe8>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40020000 	.word	0x40020000
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020400 	.word	0x40020400
 80002b8:	40020800 	.word	0x40020800
 80002bc:	40020c00 	.word	0x40020c00
 80002c0:	40021000 	.word	0x40021000
 80002c4:	40021400 	.word	0x40021400
 80002c8:	40021800 	.word	0x40021800
 80002cc:	40021c00 	.word	0x40021c00
 80002d0:	40022000 	.word	0x40022000

080002d4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2101      	movs	r1, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff6e 	bl	80001c8 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin

	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	795b      	ldrb	r3, [r3, #5]
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d820      	bhi.n	8000336 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	795b      	ldrb	r3, [r3, #5]
 80002f8:	461a      	mov	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	791b      	ldrb	r3, [r3, #4]
 80002fe:	005b      	lsls	r3, r3, #1
 8000300:	fa02 f303 	lsl.w	r3, r2, r3
 8000304:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	791b      	ldrb	r3, [r3, #4]
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	2103      	movs	r1, #3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	43db      	mvns	r3, r3
 800031a:	4619      	mov	r1, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	400a      	ands	r2, r1
 8000322:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp; //setting
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	6819      	ldr	r1, [r3, #0]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	697a      	ldr	r2, [r7, #20]
 8000330:	430a      	orrs	r2, r1
 8000332:	601a      	str	r2, [r3, #0]
 8000334:	e0cb      	b.n	80004ce <GPIO_Init+0x1fa>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	795b      	ldrb	r3, [r3, #5]
 800033a:	2b04      	cmp	r3, #4
 800033c:	d117      	bne.n	800036e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI -> FTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800033e:	4b4b      	ldr	r3, [pc, #300]	; (800046c <GPIO_Init+0x198>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	7912      	ldrb	r2, [r2, #4]
 8000346:	4611      	mov	r1, r2
 8000348:	2201      	movs	r2, #1
 800034a:	408a      	lsls	r2, r1
 800034c:	4611      	mov	r1, r2
 800034e:	4a47      	ldr	r2, [pc, #284]	; (800046c <GPIO_Init+0x198>)
 8000350:	430b      	orrs	r3, r1
 8000352:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI -> RTSR &= ~( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000354:	4b45      	ldr	r3, [pc, #276]	; (800046c <GPIO_Init+0x198>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	7912      	ldrb	r2, [r2, #4]
 800035c:	4611      	mov	r1, r2
 800035e:	2201      	movs	r2, #1
 8000360:	408a      	lsls	r2, r1
 8000362:	43d2      	mvns	r2, r2
 8000364:	4611      	mov	r1, r2
 8000366:	4a41      	ldr	r2, [pc, #260]	; (800046c <GPIO_Init+0x198>)
 8000368:	400b      	ands	r3, r1
 800036a:	6093      	str	r3, [r2, #8]
 800036c:	e035      	b.n	80003da <GPIO_Init+0x106>

		}else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	795b      	ldrb	r3, [r3, #5]
 8000372:	2b05      	cmp	r3, #5
 8000374:	d117      	bne.n	80003a6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI -> RTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000376:	4b3d      	ldr	r3, [pc, #244]	; (800046c <GPIO_Init+0x198>)
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	7912      	ldrb	r2, [r2, #4]
 800037e:	4611      	mov	r1, r2
 8000380:	2201      	movs	r2, #1
 8000382:	408a      	lsls	r2, r1
 8000384:	4611      	mov	r1, r2
 8000386:	4a39      	ldr	r2, [pc, #228]	; (800046c <GPIO_Init+0x198>)
 8000388:	430b      	orrs	r3, r1
 800038a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI -> FTSR &= ~( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800038c:	4b37      	ldr	r3, [pc, #220]	; (800046c <GPIO_Init+0x198>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	7912      	ldrb	r2, [r2, #4]
 8000394:	4611      	mov	r1, r2
 8000396:	2201      	movs	r2, #1
 8000398:	408a      	lsls	r2, r1
 800039a:	43d2      	mvns	r2, r2
 800039c:	4611      	mov	r1, r2
 800039e:	4a33      	ldr	r2, [pc, #204]	; (800046c <GPIO_Init+0x198>)
 80003a0:	400b      	ands	r3, r1
 80003a2:	60d3      	str	r3, [r2, #12]
 80003a4:	e019      	b.n	80003da <GPIO_Init+0x106>

		}else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	795b      	ldrb	r3, [r3, #5]
 80003aa:	2b06      	cmp	r3, #6
 80003ac:	d115      	bne.n	80003da <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI -> RTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003ae:	4b2f      	ldr	r3, [pc, #188]	; (800046c <GPIO_Init+0x198>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	7912      	ldrb	r2, [r2, #4]
 80003b6:	4611      	mov	r1, r2
 80003b8:	2201      	movs	r2, #1
 80003ba:	408a      	lsls	r2, r1
 80003bc:	4611      	mov	r1, r2
 80003be:	4a2b      	ldr	r2, [pc, #172]	; (800046c <GPIO_Init+0x198>)
 80003c0:	430b      	orrs	r3, r1
 80003c2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI -> FTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003c4:	4b29      	ldr	r3, [pc, #164]	; (800046c <GPIO_Init+0x198>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7912      	ldrb	r2, [r2, #4]
 80003cc:	4611      	mov	r1, r2
 80003ce:	2201      	movs	r2, #1
 80003d0:	408a      	lsls	r2, r1
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a25      	ldr	r2, [pc, #148]	; (800046c <GPIO_Init+0x198>)
 80003d6:	430b      	orrs	r3, r1
 80003d8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	089b      	lsrs	r3, r3, #2
 80003e0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	f003 0303 	and.w	r3, r3, #3
 80003ea:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a1f      	ldr	r2, [pc, #124]	; (8000470 <GPIO_Init+0x19c>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d04e      	beq.n	8000494 <GPIO_Init+0x1c0>
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a1e      	ldr	r2, [pc, #120]	; (8000474 <GPIO_Init+0x1a0>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d032      	beq.n	8000466 <GPIO_Init+0x192>
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <GPIO_Init+0x1a4>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d02b      	beq.n	8000462 <GPIO_Init+0x18e>
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a1b      	ldr	r2, [pc, #108]	; (800047c <GPIO_Init+0x1a8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d024      	beq.n	800045e <GPIO_Init+0x18a>
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a19      	ldr	r2, [pc, #100]	; (8000480 <GPIO_Init+0x1ac>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d01d      	beq.n	800045a <GPIO_Init+0x186>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a18      	ldr	r2, [pc, #96]	; (8000484 <GPIO_Init+0x1b0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d016      	beq.n	8000456 <GPIO_Init+0x182>
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a16      	ldr	r2, [pc, #88]	; (8000488 <GPIO_Init+0x1b4>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d00f      	beq.n	8000452 <GPIO_Init+0x17e>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a15      	ldr	r2, [pc, #84]	; (800048c <GPIO_Init+0x1b8>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d008      	beq.n	800044e <GPIO_Init+0x17a>
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a13      	ldr	r2, [pc, #76]	; (8000490 <GPIO_Init+0x1bc>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d101      	bne.n	800044a <GPIO_Init+0x176>
 8000446:	2308      	movs	r3, #8
 8000448:	e025      	b.n	8000496 <GPIO_Init+0x1c2>
 800044a:	2300      	movs	r3, #0
 800044c:	e023      	b.n	8000496 <GPIO_Init+0x1c2>
 800044e:	2307      	movs	r3, #7
 8000450:	e021      	b.n	8000496 <GPIO_Init+0x1c2>
 8000452:	2306      	movs	r3, #6
 8000454:	e01f      	b.n	8000496 <GPIO_Init+0x1c2>
 8000456:	2305      	movs	r3, #5
 8000458:	e01d      	b.n	8000496 <GPIO_Init+0x1c2>
 800045a:	2304      	movs	r3, #4
 800045c:	e01b      	b.n	8000496 <GPIO_Init+0x1c2>
 800045e:	2303      	movs	r3, #3
 8000460:	e019      	b.n	8000496 <GPIO_Init+0x1c2>
 8000462:	2302      	movs	r3, #2
 8000464:	e017      	b.n	8000496 <GPIO_Init+0x1c2>
 8000466:	2301      	movs	r3, #1
 8000468:	e015      	b.n	8000496 <GPIO_Init+0x1c2>
 800046a:	bf00      	nop
 800046c:	40013c00 	.word	0x40013c00
 8000470:	40020000 	.word	0x40020000
 8000474:	40020400 	.word	0x40020400
 8000478:	40020800 	.word	0x40020800
 800047c:	40020c00 	.word	0x40020c00
 8000480:	40021000 	.word	0x40021000
 8000484:	40021400 	.word	0x40021400
 8000488:	40021800 	.word	0x40021800
 800048c:	40021c00 	.word	0x40021c00
 8000490:	40022000 	.word	0x40022000
 8000494:	2300      	movs	r3, #0
 8000496:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000498:	4b59      	ldr	r3, [pc, #356]	; (8000600 <GPIO_Init+0x32c>)
 800049a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800049c:	4a58      	ldr	r2, [pc, #352]	; (8000600 <GPIO_Init+0x32c>)
 800049e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004a2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG -> EXTICR[temp1] = portcode << ( temp2 * 4);
 80004a4:	7c7a      	ldrb	r2, [r7, #17]
 80004a6:	7cbb      	ldrb	r3, [r7, #18]
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	fa02 f103 	lsl.w	r1, r2, r3
 80004ae:	4a55      	ldr	r2, [pc, #340]	; (8000604 <GPIO_Init+0x330>)
 80004b0:	7cfb      	ldrb	r3, [r7, #19]
 80004b2:	3302      	adds	r3, #2
 80004b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI -> IMR |= 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber;
 80004b8:	4b53      	ldr	r3, [pc, #332]	; (8000608 <GPIO_Init+0x334>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	687a      	ldr	r2, [r7, #4]
 80004be:	7912      	ldrb	r2, [r2, #4]
 80004c0:	4611      	mov	r1, r2
 80004c2:	2201      	movs	r2, #1
 80004c4:	408a      	lsls	r2, r1
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a4f      	ldr	r2, [pc, #316]	; (8000608 <GPIO_Init+0x334>)
 80004ca:	430b      	orrs	r3, r1
 80004cc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	799b      	ldrb	r3, [r3, #6]
 80004d2:	461a      	mov	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	689a      	ldr	r2, [r3, #8]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	791b      	ldrb	r3, [r3, #4]
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	2103      	movs	r1, #3
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	43db      	mvns	r3, r3
 80004f4:	4619      	mov	r1, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	400a      	ands	r2, r1
 80004fc:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp; //setting
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	6899      	ldr	r1, [r3, #8]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	697a      	ldr	r2, [r7, #20]
 800050a:	430a      	orrs	r2, r1
 800050c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	79db      	ldrb	r3, [r3, #7]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	68da      	ldr	r2, [r3, #12]
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	791b      	ldrb	r3, [r3, #4]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	2103      	movs	r1, #3
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	4619      	mov	r1, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	400a      	ands	r2, r1
 800053c:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp; //setting
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	68d9      	ldr	r1, [r3, #12]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	430a      	orrs	r2, r1
 800054c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	7a1b      	ldrb	r3, [r3, #8]
 8000552:	461a      	mov	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	791b      	ldrb	r3, [r3, #4]
 8000558:	fa02 f303 	lsl.w	r3, r2, r3
 800055c:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); //clearing
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	685a      	ldr	r2, [r3, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	4619      	mov	r1, r3
 800056a:	2301      	movs	r3, #1
 800056c:	408b      	lsls	r3, r1
 800056e:	43db      	mvns	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	400a      	ands	r2, r1
 8000578:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp; //setting
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	6859      	ldr	r1, [r3, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	697a      	ldr	r2, [r7, #20]
 8000586:	430a      	orrs	r2, r1
 8000588:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	2b02      	cmp	r3, #2
 8000590:	d131      	bne.n	80005f6 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	08db      	lsrs	r3, r3, #3
 8000598:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber  % 8;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	791b      	ldrb	r3, [r3, #4]
 800059e:	f003 0307 	and.w	r3, r3, #7
 80005a2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << ( 4 * temp2 )); //clearing
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7c3a      	ldrb	r2, [r7, #16]
 80005aa:	3208      	adds	r2, #8
 80005ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	220f      	movs	r2, #15
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	43db      	mvns	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	7c3a      	ldrb	r2, [r7, #16]
 80005c4:	4001      	ands	r1, r0
 80005c6:	3208      	adds	r2, #8
 80005c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 )); //setting
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	7c3a      	ldrb	r2, [r7, #16]
 80005d2:	3208      	adds	r2, #8
 80005d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	7a5b      	ldrb	r3, [r3, #9]
 80005dc:	461a      	mov	r2, r3
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	fa02 f303 	lsl.w	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	7c3a      	ldrb	r2, [r7, #16]
 80005ee:	4301      	orrs	r1, r0
 80005f0:	3208      	adds	r2, #8
 80005f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40013800 	.word	0x40013800
 8000608:	40013c00 	.word	0x40013c00

0800060c <GPIO_WriteToOutputPin>:
	value = (uint16_t)pGPIOx -> IDR;
	return value;
}

void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
 8000618:	4613      	mov	r3, r2
 800061a:	70bb      	strb	r3, [r7, #2]
	if (Value == GPIO_PIN_SET)
 800061c:	78bb      	ldrb	r3, [r7, #2]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d109      	bne.n	8000636 <GPIO_WriteToOutputPin+0x2a>
		{
			//write 1 to the output data register at the bit field corresponding to the pin number
			pGPIOx -> ODR |= ( 1 << PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	78fa      	ldrb	r2, [r7, #3]
 8000628:	2101      	movs	r1, #1
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	431a      	orrs	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	615a      	str	r2, [r3, #20]
	else
		{
			//write 0
			pGPIOx -> ODR &= ~( 1 << PinNumber);
		}
}
 8000634:	e009      	b.n	800064a <GPIO_WriteToOutputPin+0x3e>
			pGPIOx -> ODR &= ~( 1 << PinNumber);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	78fa      	ldrb	r2, [r7, #3]
 800063c:	2101      	movs	r1, #1
 800063e:	fa01 f202 	lsl.w	r2, r1, r2
 8000642:	43d2      	mvns	r2, r2
 8000644:	401a      	ands	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	615a      	str	r2, [r3, #20]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr

08000656 <GPIO_ToggleOutputPin>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx -> ODR  = Value;
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000656:	b480      	push	{r7}
 8000658:	b083      	sub	sp, #12
 800065a:	af00      	add	r7, sp, #0
 800065c:	6078      	str	r0, [r7, #4]
 800065e:	460b      	mov	r3, r1
 8000660:	70fb      	strb	r3, [r7, #3]
	pGPIOx -> ODR  ^= ( 1 << PinNumber);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	78fa      	ldrb	r2, [r7, #3]
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	405a      	eors	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	615a      	str	r2, [r3, #20]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <GPIO_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
	if (EnorDi == ENABLE)
 8000690:	79bb      	ldrb	r3, [r7, #6]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d133      	bne.n	80006fe <GPIO_IRQInterruptConfig+0x7e>
		{
			if (IRQNumber <= 31)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b1f      	cmp	r3, #31
 800069a:	d80a      	bhi.n	80006b2 <GPIO_IRQInterruptConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );
 800069c:	4b35      	ldr	r3, [pc, #212]	; (8000774 <GPIO_IRQInterruptConfig+0xf4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	2101      	movs	r1, #1
 80006a4:	fa01 f202 	lsl.w	r2, r1, r2
 80006a8:	4611      	mov	r1, r2
 80006aa:	4a32      	ldr	r2, [pc, #200]	; (8000774 <GPIO_IRQInterruptConfig+0xf4>)
 80006ac:	430b      	orrs	r3, r1
 80006ae:	6013      	str	r3, [r2, #0]
				//program ICER2 register
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
			}
		}

}
 80006b0:	e059      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b1f      	cmp	r3, #31
 80006b6:	d90f      	bls.n	80006d8 <GPIO_IRQInterruptConfig+0x58>
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b3f      	cmp	r3, #63	; 0x3f
 80006bc:	d80c      	bhi.n	80006d8 <GPIO_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <GPIO_IRQInterruptConfig+0xf8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	79fa      	ldrb	r2, [r7, #7]
 80006c4:	f002 021f 	and.w	r2, r2, #31
 80006c8:	2101      	movs	r1, #1
 80006ca:	fa01 f202 	lsl.w	r2, r1, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a29      	ldr	r2, [pc, #164]	; (8000778 <GPIO_IRQInterruptConfig+0xf8>)
 80006d2:	430b      	orrs	r3, r1
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e046      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
			else if (IRQNumber >= 64 && IRQNumber < 96 )
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	2b3f      	cmp	r3, #63	; 0x3f
 80006dc:	d943      	bls.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2b5f      	cmp	r3, #95	; 0x5f
 80006e2:	d840      	bhi.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 80006e4:	4b25      	ldr	r3, [pc, #148]	; (800077c <GPIO_IRQInterruptConfig+0xfc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	79fa      	ldrb	r2, [r7, #7]
 80006ea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006ee:	2101      	movs	r1, #1
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a21      	ldr	r2, [pc, #132]	; (800077c <GPIO_IRQInterruptConfig+0xfc>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	e033      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
			if (IRQNumber <= 31)
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b1f      	cmp	r3, #31
 8000702:	d80a      	bhi.n	800071a <GPIO_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <GPIO_IRQInterruptConfig+0x100>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	79fa      	ldrb	r2, [r7, #7]
 800070a:	2101      	movs	r1, #1
 800070c:	fa01 f202 	lsl.w	r2, r1, r2
 8000710:	4611      	mov	r1, r2
 8000712:	4a1b      	ldr	r2, [pc, #108]	; (8000780 <GPIO_IRQInterruptConfig+0x100>)
 8000714:	430b      	orrs	r3, r1
 8000716:	6013      	str	r3, [r2, #0]
}
 8000718:	e025      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
			else if (IRQNumber > 31 && IRQNumber < 64 )
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b1f      	cmp	r3, #31
 800071e:	d90f      	bls.n	8000740 <GPIO_IRQInterruptConfig+0xc0>
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	2b3f      	cmp	r3, #63	; 0x3f
 8000724:	d80c      	bhi.n	8000740 <GPIO_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <GPIO_IRQInterruptConfig+0x104>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	f002 021f 	and.w	r2, r2, #31
 8000730:	2101      	movs	r1, #1
 8000732:	fa01 f202 	lsl.w	r2, r1, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <GPIO_IRQInterruptConfig+0x104>)
 800073a:	430b      	orrs	r3, r1
 800073c:	6013      	str	r3, [r2, #0]
 800073e:	e012      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
			else if (IRQNumber >= 64 && IRQNumber < 96 )
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b3f      	cmp	r3, #63	; 0x3f
 8000744:	d90f      	bls.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b5f      	cmp	r3, #95	; 0x5f
 800074a:	d80c      	bhi.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
				*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <GPIO_IRQInterruptConfig+0x108>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	4611      	mov	r1, r2
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <GPIO_IRQInterruptConfig+0x108>)
 8000760:	430b      	orrs	r3, r1
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	e7ff      	b.n	8000766 <GPIO_IRQInterruptConfig+0xe6>
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000e104 	.word	0xe000e104
 800077c:	e000e108 	.word	0xe000e108
 8000780:	e000e180 	.word	0xe000e180
 8000784:	e000e184 	.word	0xe000e184
 8000788:	e000e188 	.word	0xe000e188

0800078c <GPIO_IRQPriorityConfig>:

void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
	//1. first lets find out the ipr register
	uint8_t iprx = IRQNumber / 4;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section  = IRQNumber %  4;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	f003 0303 	and.w	r3, r3, #3
 80007a4:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_amount = ( 8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED) ;
 80007a6:	7bbb      	ldrb	r3, [r7, #14]
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3304      	adds	r3, #4
 80007ae:	737b      	strb	r3, [r7, #13]

	*( NVIC_PR_BASE_ADDR + iprx ) |=  ( IRQPriority << shift_amount );
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007b8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007bc:	6819      	ldr	r1, [r3, #0]
 80007be:	7b7b      	ldrb	r3, [r7, #13]
 80007c0:	683a      	ldr	r2, [r7, #0]
 80007c2:	409a      	lsls	r2, r3
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007cc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007d0:	430a      	orrs	r2, r1
 80007d2:	601a      	str	r2, [r3, #0]

}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <GPIO_IRQHandling>:
void GPIO_IRQHandling(uint8_t PinNumber)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	//clear the exti pr register corresponding to the pin number
	if (EXTI -> PR & ( 1 << PinNumber))
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <GPIO_IRQHandling+0x3c>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	79fa      	ldrb	r2, [r7, #7]
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	4013      	ands	r3, r2
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d009      	beq.n	8000810 <GPIO_IRQHandling+0x30>
	{
		//clear
		EXTI -> PR |= ( 1 << PinNumber);
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <GPIO_IRQHandling+0x3c>)
 80007fe:	695b      	ldr	r3, [r3, #20]
 8000800:	79fa      	ldrb	r2, [r7, #7]
 8000802:	2101      	movs	r1, #1
 8000804:	fa01 f202 	lsl.w	r2, r1, r2
 8000808:	4611      	mov	r1, r2
 800080a:	4a04      	ldr	r2, [pc, #16]	; (800081c <GPIO_IRQHandling+0x3c>)
 800080c:	430b      	orrs	r3, r1
 800080e:	6153      	str	r3, [r2, #20]
	}
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	40013c00 	.word	0x40013c00

08000820 <delay>:
#define HIGH 1
#define LOW 0
#define BTN_PRESSED LOW

void delay(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
	//this will introduce 200ms delay when system clock is 16Mhz
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	e002      	b.n	8000832 <delay+0x12>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3301      	adds	r3, #1
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <delay+0x28>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d9f8      	bls.n	800082c <delay+0xc>
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	0003d08f 	.word	0x0003d08f

0800084c <main>:


int main(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GPIOBtn;
	memset (&GpioLed, 0, sizeof(GpioLed));
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	220c      	movs	r2, #12
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f877 	bl	800094e <memset>
	memset (&GPIOBtn, 0, sizeof(GpioLed));
 8000860:	463b      	mov	r3, r7
 8000862:	220c      	movs	r2, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f871 	bl	800094e <memset>
	//this is led gpio configuration

	GpioLed.pGPIOx = GPIOD;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <main+0x8c>)
 800086e:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000870:	230c      	movs	r3, #12
 8000872:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000874:	2301      	movs	r3, #1
 8000876:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800087c:	2300      	movs	r3, #0
 800087e:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000880:	2300      	movs	r3, #0
 8000882:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 8000884:	2101      	movs	r1, #1
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <main+0x8c>)
 8000888:	f7ff fc9e 	bl	80001c8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fd1f 	bl	80002d4 <GPIO_Init>

	//this is btn gpio configuration

	GPIOBtn.pGPIOx = GPIOD;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <main+0x8c>)
 8000898:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800089a:	2305      	movs	r3, #5
 800089c:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800089e:	2304      	movs	r3, #4
 80008a0:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80008a2:	2302      	movs	r3, #2
 80008a4:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80008a6:	2301      	movs	r3, #1
 80008a8:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 80008aa:	2101      	movs	r1, #1
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x8c>)
 80008ae:	f7ff fc8b 	bl	80001c8 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 80008b2:	463b      	mov	r3, r7
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd0d 	bl	80002d4 <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOD,GPIO_PIN_NO_12,GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	210c      	movs	r1, #12
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <main+0x8c>)
 80008c0:	f7ff fea4 	bl	800060c <GPIO_WriteToOutputPin>

	//IRQ configurations

	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5, NVIC_IRQ_PRI15);
 80008c4:	210f      	movs	r1, #15
 80008c6:	2017      	movs	r0, #23
 80008c8:	f7ff ff60 	bl	800078c <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5, ENABLE);
 80008cc:	2101      	movs	r1, #1
 80008ce:	2017      	movs	r0, #23
 80008d0:	f7ff fed6 	bl	8000680 <GPIO_IRQInterruptConfig>

	while(1);
 80008d4:	e7fe      	b.n	80008d4 <main+0x88>
 80008d6:	bf00      	nop
 80008d8:	40020c00 	.word	0x40020c00

080008dc <EXTI9_5_IRQHandler>:

}

void EXTI9_5_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
   delay(); //200ms . wait till button de-bouncing gets over
 80008e0:	f7ff ff9e 	bl	8000820 <delay>
   GPIO_IRQHandling(GPIO_PIN_NO_5); //clear the pending event from exti line
 80008e4:	2005      	movs	r0, #5
 80008e6:	f7ff ff7b 	bl	80007e0 <GPIO_IRQHandling>
   GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 80008ea:	210c      	movs	r1, #12
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <EXTI9_5_IRQHandler+0x1c>)
 80008ee:	f7ff feb2 	bl	8000656 <GPIO_ToggleOutputPin>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020c00 	.word	0x40020c00

080008fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000900:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopForever+0x6>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopForever+0xe>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopForever+0x12>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopForever+0x16>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800092a:	f000 f819 	bl	8000960 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff ff8d 	bl	800084c <main>

08000932 <LoopForever>:

LoopForever:
  b LoopForever
 8000932:	e7fe      	b.n	8000932 <LoopForever>
  ldr   r0, =_estack
 8000934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000940:	080009c8 	.word	0x080009c8
  ldr r2, =_sbss
 8000944:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000948:	2000001c 	.word	0x2000001c

0800094c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC_IRQHandler>

0800094e <memset>:
 800094e:	4402      	add	r2, r0
 8000950:	4603      	mov	r3, r0
 8000952:	4293      	cmp	r3, r2
 8000954:	d100      	bne.n	8000958 <memset+0xa>
 8000956:	4770      	bx	lr
 8000958:	f803 1b01 	strb.w	r1, [r3], #1
 800095c:	e7f9      	b.n	8000952 <memset+0x4>
	...

08000960 <__libc_init_array>:
 8000960:	b570      	push	{r4, r5, r6, lr}
 8000962:	4d0d      	ldr	r5, [pc, #52]	; (8000998 <__libc_init_array+0x38>)
 8000964:	4c0d      	ldr	r4, [pc, #52]	; (800099c <__libc_init_array+0x3c>)
 8000966:	1b64      	subs	r4, r4, r5
 8000968:	10a4      	asrs	r4, r4, #2
 800096a:	2600      	movs	r6, #0
 800096c:	42a6      	cmp	r6, r4
 800096e:	d109      	bne.n	8000984 <__libc_init_array+0x24>
 8000970:	4d0b      	ldr	r5, [pc, #44]	; (80009a0 <__libc_init_array+0x40>)
 8000972:	4c0c      	ldr	r4, [pc, #48]	; (80009a4 <__libc_init_array+0x44>)
 8000974:	f000 f818 	bl	80009a8 <_init>
 8000978:	1b64      	subs	r4, r4, r5
 800097a:	10a4      	asrs	r4, r4, #2
 800097c:	2600      	movs	r6, #0
 800097e:	42a6      	cmp	r6, r4
 8000980:	d105      	bne.n	800098e <__libc_init_array+0x2e>
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f855 3b04 	ldr.w	r3, [r5], #4
 8000988:	4798      	blx	r3
 800098a:	3601      	adds	r6, #1
 800098c:	e7ee      	b.n	800096c <__libc_init_array+0xc>
 800098e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000992:	4798      	blx	r3
 8000994:	3601      	adds	r6, #1
 8000996:	e7f2      	b.n	800097e <__libc_init_array+0x1e>
 8000998:	080009c0 	.word	0x080009c0
 800099c:	080009c0 	.word	0x080009c0
 80009a0:	080009c0 	.word	0x080009c0
 80009a4:	080009c4 	.word	0x080009c4

080009a8 <_init>:
 80009a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009aa:	bf00      	nop
 80009ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ae:	bc08      	pop	{r3}
 80009b0:	469e      	mov	lr, r3
 80009b2:	4770      	bx	lr

080009b4 <_fini>:
 80009b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b6:	bf00      	nop
 80009b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ba:	bc08      	pop	{r3}
 80009bc:	469e      	mov	lr, r3
 80009be:	4770      	bx	lr
