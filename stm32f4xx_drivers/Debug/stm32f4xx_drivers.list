
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cf8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000e80  08000e80  00010e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e9c  08000e9c  00010ea4  2**0
                  CONTENTS
  4 .ARM          00000000  08000e9c  08000e9c  00010ea4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e9c  08000ea4  00010ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e9c  08000e9c  00010e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ea4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010ea4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010ea4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010ed4  2**0
                  CONTENTS, READONLY
 14 .debug_info   000013be  00000000  00000000  00010f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000555  00000000  00000000  000122d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  00012830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000e3  00000000  00000000  00012970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000026e0  00000000  00000000  00012a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001917  00000000  00000000  00015133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000a438  00000000  00000000  00016a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000450  00000000  00000000  00020e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000212d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e68 	.word	0x08000e68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000e68 	.word	0x08000e68

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_PeriClockControl>:
 * @param[in]         - ENABLE or DISABLE macros
 * @return            -  none
 * @Note              -  none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	460b      	mov	r3, r1
 80001e2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001e4:	78fb      	ldrb	r3, [r7, #3]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d161      	bne.n	80002ae <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a33      	ldr	r2, [pc, #204]	; (80002bc <GPIO_PeriClockControl+0xe4>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80001f2:	4b33      	ldr	r3, [pc, #204]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a32      	ldr	r2, [pc, #200]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		//TODO
	}
}
 80001fe:	e056      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOB)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	4a30      	ldr	r2, [pc, #192]	; (80002c4 <GPIO_PeriClockControl+0xec>)
 8000204:	4293      	cmp	r3, r2
 8000206:	d106      	bne.n	8000216 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000208:	4b2d      	ldr	r3, [pc, #180]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a2c      	ldr	r2, [pc, #176]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800020e:	f043 0302 	orr.w	r3, r3, #2
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000214:	e04b      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOC)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a2b      	ldr	r2, [pc, #172]	; (80002c8 <GPIO_PeriClockControl+0xf0>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800021e:	4b28      	ldr	r3, [pc, #160]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a27      	ldr	r2, [pc, #156]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000224:	f043 0304 	orr.w	r3, r3, #4
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
}
 800022a:	e040      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOD)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a27      	ldr	r2, [pc, #156]	; (80002cc <GPIO_PeriClockControl+0xf4>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a21      	ldr	r2, [pc, #132]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800023a:	f043 0308 	orr.w	r3, r3, #8
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000240:	e035      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOE)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <GPIO_PeriClockControl+0xf8>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000250:	f043 0310 	orr.w	r3, r3, #16
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000256:	e02a      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOF)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a1e      	ldr	r2, [pc, #120]	; (80002d4 <GPIO_PeriClockControl+0xfc>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000266:	f043 0320 	orr.w	r3, r3, #32
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e01f      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOG)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <GPIO_PeriClockControl+0x100>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a11      	ldr	r2, [pc, #68]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800027c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e014      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOH)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a15      	ldr	r2, [pc, #84]	; (80002dc <GPIO_PeriClockControl+0x104>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 8000292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e009      	b.n	80002ae <GPIO_PeriClockControl+0xd6>
		else if (pGPIOx == GPIOI)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <GPIO_PeriClockControl+0x108>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d105      	bne.n	80002ae <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 80002a2:	4b07      	ldr	r3, [pc, #28]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a06      	ldr	r2, [pc, #24]	; (80002c0 <GPIO_PeriClockControl+0xe8>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40020400 	.word	0x40020400
 80002c8:	40020800 	.word	0x40020800
 80002cc:	40020c00 	.word	0x40020c00
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40021400 	.word	0x40021400
 80002d8:	40021800 	.word	0x40021800
 80002dc:	40021c00 	.word	0x40021c00
 80002e0:	40022000 	.word	0x40022000

080002e4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	 uint32_t temp = 0; //temp register
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ff6e 	bl	80001d8 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin

	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	795b      	ldrb	r3, [r3, #5]
 8000300:	2b03      	cmp	r3, #3
 8000302:	d820      	bhi.n	8000346 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	795b      	ldrb	r3, [r3, #5]
 8000308:	461a      	mov	r2, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	791b      	ldrb	r3, [r3, #4]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	fa02 f303 	lsl.w	r3, r2, r3
 8000314:	617b      	str	r3, [r7, #20]
		pGPIOHandle -> pGPIOx -> MODER &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	791b      	ldrb	r3, [r3, #4]
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	2103      	movs	r1, #3
 8000324:	fa01 f303 	lsl.w	r3, r1, r3
 8000328:	43db      	mvns	r3, r3
 800032a:	4619      	mov	r1, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	400a      	ands	r2, r1
 8000332:	601a      	str	r2, [r3, #0]
		pGPIOHandle -> pGPIOx -> MODER |= temp; //setting
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6819      	ldr	r1, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	430a      	orrs	r2, r1
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	e0cb      	b.n	80004de <GPIO_Init+0x1fa>

	}
	else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	795b      	ldrb	r3, [r3, #5]
 800034a:	2b04      	cmp	r3, #4
 800034c:	d117      	bne.n	800037e <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI -> FTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800034e:	4b4b      	ldr	r3, [pc, #300]	; (800047c <GPIO_Init+0x198>)
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	7912      	ldrb	r2, [r2, #4]
 8000356:	4611      	mov	r1, r2
 8000358:	2201      	movs	r2, #1
 800035a:	408a      	lsls	r2, r1
 800035c:	4611      	mov	r1, r2
 800035e:	4a47      	ldr	r2, [pc, #284]	; (800047c <GPIO_Init+0x198>)
 8000360:	430b      	orrs	r3, r1
 8000362:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI -> RTSR &= ~( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000364:	4b45      	ldr	r3, [pc, #276]	; (800047c <GPIO_Init+0x198>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	7912      	ldrb	r2, [r2, #4]
 800036c:	4611      	mov	r1, r2
 800036e:	2201      	movs	r2, #1
 8000370:	408a      	lsls	r2, r1
 8000372:	43d2      	mvns	r2, r2
 8000374:	4611      	mov	r1, r2
 8000376:	4a41      	ldr	r2, [pc, #260]	; (800047c <GPIO_Init+0x198>)
 8000378:	400b      	ands	r3, r1
 800037a:	6093      	str	r3, [r2, #8]
 800037c:	e035      	b.n	80003ea <GPIO_Init+0x106>

		}
		else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	795b      	ldrb	r3, [r3, #5]
 8000382:	2b05      	cmp	r3, #5
 8000384:	d117      	bne.n	80003b6 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI -> RTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 8000386:	4b3d      	ldr	r3, [pc, #244]	; (800047c <GPIO_Init+0x198>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	7912      	ldrb	r2, [r2, #4]
 800038e:	4611      	mov	r1, r2
 8000390:	2201      	movs	r2, #1
 8000392:	408a      	lsls	r2, r1
 8000394:	4611      	mov	r1, r2
 8000396:	4a39      	ldr	r2, [pc, #228]	; (800047c <GPIO_Init+0x198>)
 8000398:	430b      	orrs	r3, r1
 800039a:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI -> FTSR &= ~( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800039c:	4b37      	ldr	r3, [pc, #220]	; (800047c <GPIO_Init+0x198>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	687a      	ldr	r2, [r7, #4]
 80003a2:	7912      	ldrb	r2, [r2, #4]
 80003a4:	4611      	mov	r1, r2
 80003a6:	2201      	movs	r2, #1
 80003a8:	408a      	lsls	r2, r1
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	4611      	mov	r1, r2
 80003ae:	4a33      	ldr	r2, [pc, #204]	; (800047c <GPIO_Init+0x198>)
 80003b0:	400b      	ands	r3, r1
 80003b2:	60d3      	str	r3, [r2, #12]
 80003b4:	e019      	b.n	80003ea <GPIO_Init+0x106>

		}
		else if (pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	2b06      	cmp	r3, #6
 80003bc:	d115      	bne.n	80003ea <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI -> RTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <GPIO_Init+0x198>)
 80003c0:	689b      	ldr	r3, [r3, #8]
 80003c2:	687a      	ldr	r2, [r7, #4]
 80003c4:	7912      	ldrb	r2, [r2, #4]
 80003c6:	4611      	mov	r1, r2
 80003c8:	2201      	movs	r2, #1
 80003ca:	408a      	lsls	r2, r1
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a2b      	ldr	r2, [pc, #172]	; (800047c <GPIO_Init+0x198>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI -> FTSR |= ( 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 80003d4:	4b29      	ldr	r3, [pc, #164]	; (800047c <GPIO_Init+0x198>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	7912      	ldrb	r2, [r2, #4]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a25      	ldr	r2, [pc, #148]	; (800047c <GPIO_Init+0x198>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	089b      	lsrs	r3, r3, #2
 80003f0:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber % 4;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	f003 0303 	and.w	r3, r3, #3
 80003fa:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1f      	ldr	r2, [pc, #124]	; (8000480 <GPIO_Init+0x19c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d04e      	beq.n	80004a4 <GPIO_Init+0x1c0>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1e      	ldr	r2, [pc, #120]	; (8000484 <GPIO_Init+0x1a0>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d032      	beq.n	8000476 <GPIO_Init+0x192>
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <GPIO_Init+0x1a4>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d02b      	beq.n	8000472 <GPIO_Init+0x18e>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a1b      	ldr	r2, [pc, #108]	; (800048c <GPIO_Init+0x1a8>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d024      	beq.n	800046e <GPIO_Init+0x18a>
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a19      	ldr	r2, [pc, #100]	; (8000490 <GPIO_Init+0x1ac>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d01d      	beq.n	800046a <GPIO_Init+0x186>
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a18      	ldr	r2, [pc, #96]	; (8000494 <GPIO_Init+0x1b0>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d016      	beq.n	8000466 <GPIO_Init+0x182>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <GPIO_Init+0x1b4>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d00f      	beq.n	8000462 <GPIO_Init+0x17e>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4a15      	ldr	r2, [pc, #84]	; (800049c <GPIO_Init+0x1b8>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d008      	beq.n	800045e <GPIO_Init+0x17a>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <GPIO_Init+0x1bc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d101      	bne.n	800045a <GPIO_Init+0x176>
 8000456:	2308      	movs	r3, #8
 8000458:	e025      	b.n	80004a6 <GPIO_Init+0x1c2>
 800045a:	2300      	movs	r3, #0
 800045c:	e023      	b.n	80004a6 <GPIO_Init+0x1c2>
 800045e:	2307      	movs	r3, #7
 8000460:	e021      	b.n	80004a6 <GPIO_Init+0x1c2>
 8000462:	2306      	movs	r3, #6
 8000464:	e01f      	b.n	80004a6 <GPIO_Init+0x1c2>
 8000466:	2305      	movs	r3, #5
 8000468:	e01d      	b.n	80004a6 <GPIO_Init+0x1c2>
 800046a:	2304      	movs	r3, #4
 800046c:	e01b      	b.n	80004a6 <GPIO_Init+0x1c2>
 800046e:	2303      	movs	r3, #3
 8000470:	e019      	b.n	80004a6 <GPIO_Init+0x1c2>
 8000472:	2302      	movs	r3, #2
 8000474:	e017      	b.n	80004a6 <GPIO_Init+0x1c2>
 8000476:	2301      	movs	r3, #1
 8000478:	e015      	b.n	80004a6 <GPIO_Init+0x1c2>
 800047a:	bf00      	nop
 800047c:	40013c00 	.word	0x40013c00
 8000480:	40020000 	.word	0x40020000
 8000484:	40020400 	.word	0x40020400
 8000488:	40020800 	.word	0x40020800
 800048c:	40020c00 	.word	0x40020c00
 8000490:	40021000 	.word	0x40021000
 8000494:	40021400 	.word	0x40021400
 8000498:	40021800 	.word	0x40021800
 800049c:	40021c00 	.word	0x40021c00
 80004a0:	40022000 	.word	0x40022000
 80004a4:	2300      	movs	r3, #0
 80004a6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004a8:	4b59      	ldr	r3, [pc, #356]	; (8000610 <GPIO_Init+0x32c>)
 80004aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ac:	4a58      	ldr	r2, [pc, #352]	; (8000610 <GPIO_Init+0x32c>)
 80004ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG -> EXTICR[temp1] = portcode << ( temp2 * 4);
 80004b4:	7c7a      	ldrb	r2, [r7, #17]
 80004b6:	7cbb      	ldrb	r3, [r7, #18]
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	fa02 f103 	lsl.w	r1, r2, r3
 80004be:	4a55      	ldr	r2, [pc, #340]	; (8000614 <GPIO_Init+0x330>)
 80004c0:	7cfb      	ldrb	r3, [r7, #19]
 80004c2:	3302      	adds	r3, #2
 80004c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI -> IMR |= 1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber;
 80004c8:	4b53      	ldr	r3, [pc, #332]	; (8000618 <GPIO_Init+0x334>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	687a      	ldr	r2, [r7, #4]
 80004ce:	7912      	ldrb	r2, [r2, #4]
 80004d0:	4611      	mov	r1, r2
 80004d2:	2201      	movs	r2, #1
 80004d4:	408a      	lsls	r2, r1
 80004d6:	4611      	mov	r1, r2
 80004d8:	4a4f      	ldr	r2, [pc, #316]	; (8000618 <GPIO_Init+0x334>)
 80004da:	430b      	orrs	r3, r1
 80004dc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	799b      	ldrb	r3, [r3, #6]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OSPEEDR &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	689a      	ldr	r2, [r3, #8]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	2103      	movs	r1, #3
 80004fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000502:	43db      	mvns	r3, r3
 8000504:	4619      	mov	r1, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	400a      	ands	r2, r1
 800050c:	609a      	str	r2, [r3, #8]
	pGPIOHandle -> pGPIOx -> OSPEEDR |= temp; //setting
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6899      	ldr	r1, [r3, #8]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	430a      	orrs	r2, r1
 800051c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	461a      	mov	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	005b      	lsls	r3, r3, #1
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> PUPDR &= ~( 0x3 << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	68da      	ldr	r2, [r3, #12]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	791b      	ldrb	r3, [r3, #4]
 800053a:	005b      	lsls	r3, r3, #1
 800053c:	2103      	movs	r1, #3
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	43db      	mvns	r3, r3
 8000544:	4619      	mov	r1, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	400a      	ands	r2, r1
 800054c:	60da      	str	r2, [r3, #12]
	pGPIOHandle -> pGPIOx -> PUPDR |= temp; //setting
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68d9      	ldr	r1, [r3, #12]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	430a      	orrs	r2, r1
 800055c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle -> GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	7a1b      	ldrb	r3, [r3, #8]
 8000562:	461a      	mov	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	791b      	ldrb	r3, [r3, #4]
 8000568:	fa02 f303 	lsl.w	r3, r2, r3
 800056c:	617b      	str	r3, [r7, #20]
	pGPIOHandle -> pGPIOx -> OTYPER &= ~(0x1 << pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber); //clearing
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	685a      	ldr	r2, [r3, #4]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	791b      	ldrb	r3, [r3, #4]
 8000578:	4619      	mov	r1, r3
 800057a:	2301      	movs	r3, #1
 800057c:	408b      	lsls	r3, r1
 800057e:	43db      	mvns	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	400a      	ands	r2, r1
 8000588:	605a      	str	r2, [r3, #4]
	pGPIOHandle -> pGPIOx -> OTYPER |= temp; //setting
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	6859      	ldr	r1, [r3, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	430a      	orrs	r2, r1
 8000598:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle -> GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	2b02      	cmp	r3, #2
 80005a0:	d131      	bne.n	8000606 <GPIO_Init+0x322>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber / 8;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	791b      	ldrb	r3, [r3, #4]
 80005a6:	08db      	lsrs	r3, r3, #3
 80005a8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber  % 8;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	f003 0307 	and.w	r3, r3, #7
 80005b2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle -> pGPIOx -> AFR[temp1] &= ~(0xF << ( 4 * temp2 )); //clearing
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	7c3a      	ldrb	r2, [r7, #16]
 80005ba:	3208      	adds	r2, #8
 80005bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	220f      	movs	r2, #15
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	43db      	mvns	r3, r3
 80005cc:	4618      	mov	r0, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	7c3a      	ldrb	r2, [r7, #16]
 80005d4:	4001      	ands	r1, r0
 80005d6:	3208      	adds	r2, #8
 80005d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle -> pGPIOx -> AFR[temp1] |= (pGPIOHandle -> GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 )); //setting
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	7c3a      	ldrb	r2, [r7, #16]
 80005e2:	3208      	adds	r2, #8
 80005e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7a5b      	ldrb	r3, [r3, #9]
 80005ec:	461a      	mov	r2, r3
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	fa02 f303 	lsl.w	r3, r2, r3
 80005f6:	4618      	mov	r0, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7c3a      	ldrb	r2, [r7, #16]
 80005fe:	4301      	orrs	r1, r0
 8000600:	3208      	adds	r2, #8
 8000602:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40013800 	.word	0x40013800
 8000618:	40013c00 	.word	0x40013c00

0800061c <GPIO_ReadFromInputPin>:

/*
 * Data read and write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx -> IDR  >> PinNumber) & 0x00000001);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	691a      	ldr	r2, [r3, #16]
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	fa22 f303 	lsr.w	r3, r2, r3
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	73fb      	strb	r3, [r7, #15]
	return value;
 800063a:	7bfb      	ldrb	r3, [r7, #15]
}
 800063c:	4618      	mov	r0, r3
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <SPI_PeriClockControl>:
/*
 * Peripheral Clock setup
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d11f      	bne.n	800069a <SPI_PeriClockControl+0x52>
		{
			if(pSPIx == SPI1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <SPI_PeriClockControl+0x60>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <SPI_PeriClockControl+0x28>
			{
				SPI1_PCLK_EN();
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <SPI_PeriClockControl+0x64>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <SPI_PeriClockControl+0x64>)
 8000668:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800066c:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else
		{
			//TODO
		}
}
 800066e:	e014      	b.n	800069a <SPI_PeriClockControl+0x52>
			else if (pSPIx == SPI2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <SPI_PeriClockControl+0x68>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <SPI_PeriClockControl+0x3e>
				SPI2_PCLK_EN();
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <SPI_PeriClockControl+0x64>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <SPI_PeriClockControl+0x64>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000684:	e009      	b.n	800069a <SPI_PeriClockControl+0x52>
			else if (pSPIx == SPI3)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SPI_PeriClockControl+0x6c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d105      	bne.n	800069a <SPI_PeriClockControl+0x52>
				SPI3_PCLK_EN();
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <SPI_PeriClockControl+0x64>)
 8000690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000692:	4a06      	ldr	r2, [pc, #24]	; (80006ac <SPI_PeriClockControl+0x64>)
 8000694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000698:	6413      	str	r3, [r2, #64]	; 0x40
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40013000 	.word	0x40013000
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40003800 	.word	0x40003800
 80006b4:	40003c00 	.word	0x40003c00

080006b8 <SPI_Init>:
/*
 * Init and De-init
 */

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle -> pSPIx, ENABLE);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ffbe 	bl	8000648 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle -> SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	461a      	mov	r2, r3
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4313      	orrs	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	795b      	ldrb	r3, [r3, #5]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d104      	bne.n	80006f0 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e014      	b.n	800071a <SPI_Init+0x62>

	}
	else if (pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	795b      	ldrb	r3, [r3, #5]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d104      	bne.n	8000702 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e00b      	b.n	800071a <SPI_Init+0x62>
	}
	else if (pSPIHandle -> SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	795b      	ldrb	r3, [r3, #5]
 8000706:	2b03      	cmp	r3, #3
 8000708:	d107      	bne.n	800071a <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000710:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000718:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle -> SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	799b      	ldrb	r3, [r3, #6]
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	461a      	mov	r2, r3
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4313      	orrs	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle -> SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	79db      	ldrb	r3, [r3, #7]
 800072c:	02db      	lsls	r3, r3, #11
 800072e:	461a      	mov	r2, r3
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4313      	orrs	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle -> SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	7a1b      	ldrb	r3, [r3, #8]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	461a      	mov	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4313      	orrs	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle -> SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	7a5b      	ldrb	r3, [r3, #9]
 8000748:	461a      	mov	r2, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle -> SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7a9b      	ldrb	r3, [r3, #10]
 8000754:	025b      	lsls	r3, r3, #9
 8000756:	461a      	mov	r2, r3
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4313      	orrs	r3, r2
 800075c:	60fb      	str	r3, [r7, #12]

	pSPIHandle -> pSPIx -> CR1 = tempreg;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	601a      	str	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <SPI_GetFlagStatus>:
			SPI3_REG_RESET();
		}
}
////////////////////////////////////////////
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 800076e:	b480      	push	{r7}
 8000770:	b083      	sub	sp, #12
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	if(pSPIx -> SR & FlagName)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	4013      	ands	r3, r2
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr

08000796 <SPI_SendData>:
/*
 * Data Send and Receive
 */

void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	b084      	sub	sp, #16
 800079a:	af00      	add	r7, sp, #0
 800079c:	60f8      	str	r0, [r7, #12]
 800079e:	60b9      	str	r1, [r7, #8]
 80007a0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80007a2:	e027      	b.n	80007f4 <SPI_SendData+0x5e>
		{
			//1. wait until TXE is set
			while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG) == FLAG_RESET);
 80007a4:	bf00      	nop
 80007a6:	2102      	movs	r1, #2
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f7ff ffe0 	bl	800076e <SPI_GetFlagStatus>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f8      	beq.n	80007a6 <SPI_SendData+0x10>

			//2. check the DFF bit in CR1
		 	if( (pSPIx -> CR1 & ( 1 << SPI_CR1_DFF ) ) )
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00e      	beq.n	80007de <SPI_SendData+0x48>
			{
				//16 bit DFF
				//1. load the data in to the DR
				pSPIx -> DR = *( (uint16_t*)pTxBuffer );
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	60da      	str	r2, [r3, #12]
				Len--;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
				Len--;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxBuffer++;
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	3301      	adds	r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	e00a      	b.n	80007f4 <SPI_SendData+0x5e>
			}
		 	else
			{
				//8 bit DFF
				pSPIx -> DR = *pTxBuffer;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	60da      	str	r2, [r3, #12]
				Len--;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	607b      	str	r3, [r7, #4]
				pTxBuffer++;
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	3301      	adds	r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1d4      	bne.n	80007a4 <SPI_SendData+0xe>
			}
		}
}
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <SPI_ReceiveData>:

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000810:	e027      	b.n	8000862 <SPI_ReceiveData+0x5e>
		{
			//1. wait until RXNE is set
			while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == (uint8_t)FLAG_RESET );
 8000812:	bf00      	nop
 8000814:	2101      	movs	r1, #1
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff ffa9 	bl	800076e <SPI_GetFlagStatus>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f8      	beq.n	8000814 <SPI_ReceiveData+0x10>

			//2. check the DFF bit in CR1
		 	if( (pSPIx -> CR1 & ( 1 << SPI_CR1_DFF ) ) )
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00e      	beq.n	800084c <SPI_ReceiveData+0x48>
			{
				//16 bit DFF
		 		//1. load the data from DR to Rxbuffer address
		 		 *((uint16_t*)pRxBuffer) = pSPIx->DR;
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	b29a      	uxth	r2, r3
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	801a      	strh	r2, [r3, #0]
				Len--;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	607b      	str	r3, [r7, #4]
				Len--;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3b01      	subs	r3, #1
 8000842:	607b      	str	r3, [r7, #4]
				(uint16_t*)pRxBuffer++;
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	3301      	adds	r3, #1
 8000848:	60bb      	str	r3, [r7, #8]
 800084a:	e00a      	b.n	8000862 <SPI_ReceiveData+0x5e>
			}
		 	else
			{
				//8 bit DFF
		 		*pRxBuffer = pSPIx -> DR;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	701a      	strb	r2, [r3, #0]
				Len--;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3b01      	subs	r3, #1
 800085a:	607b      	str	r3, [r7, #4]
				pRxBuffer++;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	3301      	adds	r3, #1
 8000860:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d1d4      	bne.n	8000812 <SPI_ReceiveData+0xe>
			}
		}
}
 8000868:	bf00      	nop
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
 800087a:	460b      	mov	r3, r1
 800087c:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d106      	bne.n	8000892 <SPI_PeripheralControl+0x20>
	{
		//Set - enable
		pSPIx -> CR1 |= (1 << SPI_CR1_SPE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	601a      	str	r2, [r3, #0]
	else
	{
		//Clear - disable
		pSPIx -> CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000890:	e005      	b.n	800089e <SPI_PeripheralControl+0x2c>
		pSPIx -> CR1 &= ~(1 << SPI_CR1_SPE);
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <SPI_SSOEConfig>:
			pSPIx -> CR1 &=  ~(1 << SPI_CR1_SSI);
		}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d106      	bne.n	80008ca <SPI_SSOEConfig+0x20>
		{
			//Set - enable
			pSPIx -> CR2 |=  (1 << SPI_CR2_SSOE);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	f043 0204 	orr.w	r2, r3, #4
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	605a      	str	r2, [r3, #4]
	else
		{
			//Clear - disable
			pSPIx -> CR2 &=  ~(1 << SPI_CR2_SSOE);
		}
}
 80008c8:	e005      	b.n	80008d6 <SPI_SSOEConfig+0x2c>
			pSPIx -> CR2 &=  ~(1 << SPI_CR2_SSOE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f023 0204 	bic.w	r2, r3, #4
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	605a      	str	r2, [r3, #4]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <delay>:
//arduino led

#define LED_PIN  9

void delay(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
	//this will introduce 200ms delay when system clock is 16Mhz
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e002      	b.n	80008f6 <delay+0x12>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <delay+0x28>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d9f8      	bls.n	80008f0 <delay+0xc>
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	0007a11f 	.word	0x0007a11f

08000910 <SPI2_GPIOInits>:
 * PB13 --> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
*/
void SPI2_GPIOInits(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <SPI2_GPIOInits+0x58>)
 8000918:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800091a:	2302      	movs	r3, #2
 800091c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800091e:	2305      	movs	r3, #5
 8000920:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000922:	2300      	movs	r3, #0
 8000924:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000926:	2300      	movs	r3, #0
 8000928:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800092a:	2302      	movs	r3, #2
 800092c:	72bb      	strb	r3, [r7, #10]

	//SCLK- Serial Clock output
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800092e:	230d      	movs	r3, #13
 8000930:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fcd5 	bl	80002e4 <GPIO_Init>

	//MOSI - Master Out / Slave In data
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800093a:	230f      	movs	r3, #15
 800093c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fccf 	bl	80002e4 <GPIO_Init>


	//MISO - Master In / Slave Out data
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000946:	230e      	movs	r3, #14
 8000948:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fcc9 	bl	80002e4 <GPIO_Init>

	//NSS - Slave select
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000952:	230c      	movs	r3, #12
 8000954:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fcc3 	bl	80002e4 <GPIO_Init>
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40020400 	.word	0x40020400

0800096c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <SPI2_Inits+0x38>)
 8000974:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000976:	2301      	movs	r3, #1
 8000978:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800097a:	2301      	movs	r3, #1
 800097c:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32; //generates sclk of 8MHz
 800097e:	2304      	movs	r3, #4
 8000980:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000982:	2300      	movs	r3, #0
 8000984:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //software slave management enabled for NSS pin
 800098e:	2300      	movs	r3, #0
 8000990:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000992:	463b      	mov	r3, r7
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe8f 	bl	80006b8 <SPI_Init>
}
 800099a:	bf00      	nop
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40003800 	.word	0x40003800

080009a8 <GPIO_ButtonInit>:

void GPIO_ButtonInit()
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;;
	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <GPIO_ButtonInit+0x54>)
 80009b0:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80009b6:	2300      	movs	r3, #0
 80009b8:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009ba:	2302      	movs	r3, #2
 80009bc:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009be:	2300      	movs	r3, #0
 80009c0:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fc8c 	bl	80002e4 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <GPIO_ButtonInit+0x58>)
 80009ce:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80009d0:	230c      	movs	r3, #12
 80009d2:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009d4:	2301      	movs	r3, #1
 80009d6:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009d8:	2302      	movs	r3, #2
 80009da:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80009dc:	2301      	movs	r3, #1
 80009de:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009e0:	2300      	movs	r3, #0
 80009e2:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80009e4:	2101      	movs	r1, #1
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <GPIO_ButtonInit+0x58>)
 80009e8:	f7ff fbf6 	bl	80001d8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80009ec:	463b      	mov	r3, r7
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fc78 	bl	80002e4 <GPIO_Init>
}
 80009f4:	bf00      	nop
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020000 	.word	0x40020000
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]

	if(ackbyte == (uint8_t)0xF5)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2bf5      	cmp	r3, #245	; 0xf5
 8000a12:	d101      	bne.n	8000a18 <SPI_VerifyResponse+0x14>
	{
		//ack
		return 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <main>:

int main(void)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af00      	add	r7, sp, #0
	uint8_t dummy_write = 0xff;
 8000a2e:	23ff      	movs	r3, #255	; 0xff
 8000a30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t dummy_read;

	GPIO_ButtonInit();
 8000a34:	f7ff ffb8 	bl	80009a8 <GPIO_ButtonInit>

	//This function in used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000a38:	f7ff ff6a 	bl	8000910 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000a3c:	f7ff ff96 	bl	800096c <SPI2_Inits>
	/*
	* Set SSOE to 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* In other words(i.e) when SPE = 1 , NSS will be pulled to low and NSS pin will be high when SPE = 0.
	*/
	SPI_SSOEConfig(SPI2, ENABLE);
 8000a40:	2101      	movs	r1, #1
 8000a42:	48cb      	ldr	r0, [pc, #812]	; (8000d70 <main+0x348>)
 8000a44:	f7ff ff31 	bl	80008aa <SPI_SSOEConfig>

	while(1)
		{
			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000a48:	bf00      	nop
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	48c9      	ldr	r0, [pc, #804]	; (8000d74 <main+0x34c>)
 8000a4e:	f7ff fde5 	bl	800061c <GPIO_ReadFromInputPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d0f8      	beq.n	8000a4a <main+0x22>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000a58:	f7ff ff44 	bl	80008e4 <delay>

			//enable the SPI2 peripheral
			SPI_PeripheralControl(SPI2,ENABLE);
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	48c4      	ldr	r0, [pc, #784]	; (8000d70 <main+0x348>)
 8000a60:	f7ff ff07 	bl	8000872 <SPI_PeripheralControl>

		    //1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>

			uint8_t commandcode = COMMAND_LED_CTRL;
 8000a64:	2350      	movs	r3, #80	; 0x50
 8000a66:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			uint8_t ackbyte;
			uint8_t args[2];

			//send command
			SPI_SendData(SPI2, &commandcode, 1);
 8000a6a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4619      	mov	r1, r3
 8000a72:	48bf      	ldr	r0, [pc, #764]	; (8000d70 <main+0x348>)
 8000a74:	f7ff fe8f 	bl	8000796 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000a78:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	4619      	mov	r1, r3
 8000a80:	48bb      	ldr	r0, [pc, #748]	; (8000d70 <main+0x348>)
 8000a82:	f7ff febf 	bl	8000804 <SPI_ReceiveData>


			//Send some dummy bits (1 byte) fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000a86:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	48b8      	ldr	r0, [pc, #736]	; (8000d70 <main+0x348>)
 8000a90:	f7ff fe81 	bl	8000796 <SPI_SendData>

			//read the ack byte received
			SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000a94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	48b4      	ldr	r0, [pc, #720]	; (8000d70 <main+0x348>)
 8000a9e:	f7ff feb1 	bl	8000804 <SPI_ReceiveData>

			if( SPI_VerifyResponse(ackbyte))
 8000aa2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffac 	bl	8000a04 <SPI_VerifyResponse>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d013      	beq.n	8000ada <main+0xb2>
			{
				args[0] = LED_PIN;
 8000ab2:	2309      	movs	r3, #9
 8000ab4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				args[1] = LED_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

				//send arguments
				SPI_SendData(SPI2,args, 2);
 8000abe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	48aa      	ldr	r0, [pc, #680]	; (8000d70 <main+0x348>)
 8000ac8:	f7ff fe65 	bl	8000796 <SPI_SendData>
				// dummy read
				SPI_ReceiveData(SPI2,args, 2);
 8000acc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	48a6      	ldr	r0, [pc, #664]	; (8000d70 <main+0x348>)
 8000ad6:	f7ff fe95 	bl	8000804 <SPI_ReceiveData>
			//end of COMMAND_LED_CTRL

			//2. CMD_SENSOR_READ   <analog pin number(1) >

			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) );
 8000ada:	bf00      	nop
 8000adc:	2100      	movs	r1, #0
 8000ade:	48a5      	ldr	r0, [pc, #660]	; (8000d74 <main+0x34c>)
 8000ae0:	f7ff fd9c 	bl	800061c <GPIO_ReadFromInputPin>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d0f8      	beq.n	8000adc <main+0xb4>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000aea:	f7ff fefb 	bl	80008e4 <delay>

			commandcode = COMMAND_SENSOR_READ;
 8000aee:	2351      	movs	r3, #81	; 0x51
 8000af0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			//send command
			SPI_SendData(SPI2, &commandcode, 1);
 8000af4:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	489c      	ldr	r0, [pc, #624]	; (8000d70 <main+0x348>)
 8000afe:	f7ff fe4a 	bl	8000796 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000b02:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000b06:	2201      	movs	r2, #1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4899      	ldr	r0, [pc, #612]	; (8000d70 <main+0x348>)
 8000b0c:	f7ff fe7a 	bl	8000804 <SPI_ReceiveData>


			//Send some dummy byte to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000b10:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000b14:	2201      	movs	r2, #1
 8000b16:	4619      	mov	r1, r3
 8000b18:	4895      	ldr	r0, [pc, #596]	; (8000d70 <main+0x348>)
 8000b1a:	f7ff fe3c 	bl	8000796 <SPI_SendData>

			//read the ack byte received
			SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000b1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4892      	ldr	r0, [pc, #584]	; (8000d70 <main+0x348>)
 8000b28:	f7ff fe6c 	bl	8000804 <SPI_ReceiveData>

			if( SPI_VerifyResponse(ackbyte))
 8000b2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff67 	bl	8000a04 <SPI_VerifyResponse>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d01f      	beq.n	8000b7c <main+0x154>
			{
				args[0] = ANALOG_PIN0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				//send arguments
				SPI_SendData(SPI2, args, 1); //sending one byte of
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	2201      	movs	r2, #1
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4889      	ldr	r0, [pc, #548]	; (8000d70 <main+0x348>)
 8000b4c:	f7ff fe23 	bl	8000796 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000b50:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000b54:	2201      	movs	r2, #1
 8000b56:	4619      	mov	r1, r3
 8000b58:	4885      	ldr	r0, [pc, #532]	; (8000d70 <main+0x348>)
 8000b5a:	f7ff fe53 	bl	8000804 <SPI_ReceiveData>

				//insert some delay so that slave can ready with the data
				delay();
 8000b5e:	f7ff fec1 	bl	80008e4 <delay>

				//Send some dummy bits (1 byte) fetch the response from the slave
				SPI_SendData(SPI2, &dummy_write, 1);
 8000b62:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4881      	ldr	r0, [pc, #516]	; (8000d70 <main+0x348>)
 8000b6c:	f7ff fe13 	bl	8000796 <SPI_SendData>

				uint8_t analog_read;
				SPI_ReceiveData(SPI2, &analog_read, 1);
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	487e      	ldr	r0, [pc, #504]	; (8000d70 <main+0x348>)
 8000b78:	f7ff fe44 	bl	8000804 <SPI_ReceiveData>
			}

			//3.  CMD_LED_READ 	 <pin no(1) >

			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) );
 8000b7c:	bf00      	nop
 8000b7e:	2100      	movs	r1, #0
 8000b80:	487c      	ldr	r0, [pc, #496]	; (8000d74 <main+0x34c>)
 8000b82:	f7ff fd4b 	bl	800061c <GPIO_ReadFromInputPin>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f8      	beq.n	8000b7e <main+0x156>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000b8c:	f7ff feaa 	bl	80008e4 <delay>

			commandcode = COMMAND_LED_READ;
 8000b90:	2352      	movs	r3, #82	; 0x52
 8000b92:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			//send command
			SPI_SendData(SPI2, &commandcode, 1);
 8000b96:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4874      	ldr	r0, [pc, #464]	; (8000d70 <main+0x348>)
 8000ba0:	f7ff fdf9 	bl	8000796 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000ba4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	4870      	ldr	r0, [pc, #448]	; (8000d70 <main+0x348>)
 8000bae:	f7ff fe29 	bl	8000804 <SPI_ReceiveData>

			//Send some dummy byte to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000bb2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	486d      	ldr	r0, [pc, #436]	; (8000d70 <main+0x348>)
 8000bbc:	f7ff fdeb 	bl	8000796 <SPI_SendData>

			//read the ack byte received
			SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000bc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4869      	ldr	r0, [pc, #420]	; (8000d70 <main+0x348>)
 8000bca:	f7ff fe1b 	bl	8000804 <SPI_ReceiveData>

			if( SPI_VerifyResponse(ackbyte))
 8000bce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff16 	bl	8000a04 <SPI_VerifyResponse>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d01f      	beq.n	8000c1e <main+0x1f6>
			{
				args[0] = LED_PIN;
 8000bde:	2309      	movs	r3, #9
 8000be0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				//send arguments
				SPI_SendData(SPI2, args, 1); //sending one byte of
 8000be4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	4860      	ldr	r0, [pc, #384]	; (8000d70 <main+0x348>)
 8000bee:	f7ff fdd2 	bl	8000796 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000bf2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	485d      	ldr	r0, [pc, #372]	; (8000d70 <main+0x348>)
 8000bfc:	f7ff fe02 	bl	8000804 <SPI_ReceiveData>

				//insert some delay so that slave can ready with the data
				delay();
 8000c00:	f7ff fe70 	bl	80008e4 <delay>

				//Send some dummy bits (1 byte) fetch the response from the slave
				SPI_SendData(SPI2, &dummy_write, 1);
 8000c04:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4858      	ldr	r0, [pc, #352]	; (8000d70 <main+0x348>)
 8000c0e:	f7ff fdc2 	bl	8000796 <SPI_SendData>

				uint8_t led_status;
				SPI_ReceiveData(SPI2, &led_status, 1);
 8000c12:	1dbb      	adds	r3, r7, #6
 8000c14:	2201      	movs	r2, #1
 8000c16:	4619      	mov	r1, r3
 8000c18:	4855      	ldr	r0, [pc, #340]	; (8000d70 <main+0x348>)
 8000c1a:	f7ff fdf3 	bl	8000804 <SPI_ReceiveData>
			}

			//4. CMD_PRINT 		<len(2)>  <message(len) >

			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) );
 8000c1e:	bf00      	nop
 8000c20:	2100      	movs	r1, #0
 8000c22:	4854      	ldr	r0, [pc, #336]	; (8000d74 <main+0x34c>)
 8000c24:	f7ff fcfa 	bl	800061c <GPIO_ReadFromInputPin>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f8      	beq.n	8000c20 <main+0x1f8>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000c2e:	f7ff fe59 	bl	80008e4 <delay>

			commandcode = COMMAND_PRINT;
 8000c32:	2353      	movs	r3, #83	; 0x53
 8000c34:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			//send command
			SPI_SendData(SPI2, &commandcode, 1);
 8000c38:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	484b      	ldr	r0, [pc, #300]	; (8000d70 <main+0x348>)
 8000c42:	f7ff fda8 	bl	8000796 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000c46:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4848      	ldr	r0, [pc, #288]	; (8000d70 <main+0x348>)
 8000c50:	f7ff fdd8 	bl	8000804 <SPI_ReceiveData>

			//Send some dummy byte to fetch the response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000c54:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4844      	ldr	r0, [pc, #272]	; (8000d70 <main+0x348>)
 8000c5e:	f7ff fd9a 	bl	8000796 <SPI_SendData>

			//read the ack byte received
			SPI_ReceiveData(SPI2, &ackbyte, 1);
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	2201      	movs	r2, #1
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4841      	ldr	r0, [pc, #260]	; (8000d70 <main+0x348>)
 8000c6c:	f7ff fdca 	bl	8000804 <SPI_ReceiveData>

			uint8_t message[] = "Hello david! How are you ?";
 8000c70:	4b41      	ldr	r3, [pc, #260]	; (8000d78 <main+0x350>)
 8000c72:	f107 0414 	add.w	r4, r7, #20
 8000c76:	461d      	mov	r5, r3
 8000c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c80:	c403      	stmia	r4!, {r0, r1}
 8000c82:	8022      	strh	r2, [r4, #0]
 8000c84:	3402      	adds	r4, #2
 8000c86:	0c13      	lsrs	r3, r2, #16
 8000c88:	7023      	strb	r3, [r4, #0]
			if( SPI_VerifyResponse(ackbyte))
 8000c8a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff feb8 	bl	8000a04 <SPI_VerifyResponse>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d034      	beq.n	8000d04 <main+0x2dc>
			{
				args[0] = strlen((char*)message);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f7ff fa92 	bl	80001c8 <strlen>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				//send arguments
				SPI_SendData(SPI2, args, 1); //sending length
 8000cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	482e      	ldr	r0, [pc, #184]	; (8000d70 <main+0x348>)
 8000cb6:	f7ff fd6e 	bl	8000796 <SPI_SendData>

				//do dummy read to clear off the RXNE
				SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000cba:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	482b      	ldr	r0, [pc, #172]	; (8000d70 <main+0x348>)
 8000cc4:	f7ff fd9e 	bl	8000804 <SPI_ReceiveData>

				delay();
 8000cc8:	f7ff fe0c 	bl	80008e4 <delay>

				//send message
				for(int i = 0 ; i < args[0] + 1 ; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cd0:	e012      	b.n	8000cf8 <main+0x2d0>
				{
					SPI_SendData(SPI2, &message[i], 1);
 8000cd2:	f107 0214 	add.w	r2, r7, #20
 8000cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cd8:	4413      	add	r3, r2
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4824      	ldr	r0, [pc, #144]	; (8000d70 <main+0x348>)
 8000ce0:	f7ff fd59 	bl	8000796 <SPI_SendData>
					SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000ce4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	4820      	ldr	r0, [pc, #128]	; (8000d70 <main+0x348>)
 8000cee:	f7ff fd89 	bl	8000804 <SPI_ReceiveData>
				for(int i = 0 ; i < args[0] + 1 ; i++)
 8000cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cf8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d00:	4293      	cmp	r3, r2
 8000d02:	dde6      	ble.n	8000cd2 <main+0x2aa>

			}

			//5. CMD_ID_READ
			//wait till button is pressed
			while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000d04:	bf00      	nop
 8000d06:	2100      	movs	r1, #0
 8000d08:	481a      	ldr	r0, [pc, #104]	; (8000d74 <main+0x34c>)
 8000d0a:	f7ff fc87 	bl	800061c <GPIO_ReadFromInputPin>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f8      	beq.n	8000d06 <main+0x2de>

			//to avoid button de-bouncing related issues 200ms of delay
			delay();
 8000d14:	f7ff fde6 	bl	80008e4 <delay>

			commandcode = COMMAND_ID_READ;
 8000d18:	2354      	movs	r3, #84	; 0x54
 8000d1a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			//send command
			SPI_SendData(SPI2,&commandcode,1);
 8000d1e:	f107 0335 	add.w	r3, r7, #53	; 0x35
 8000d22:	2201      	movs	r2, #1
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <main+0x348>)
 8000d28:	f7ff fd35 	bl	8000796 <SPI_SendData>

			//do dummy read to clear off the RXNE
			SPI_ReceiveData(SPI2,&dummy_read,1);
 8000d2c:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8000d30:	2201      	movs	r2, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	480e      	ldr	r0, [pc, #56]	; (8000d70 <main+0x348>)
 8000d36:	f7ff fd65 	bl	8000804 <SPI_ReceiveData>

			//Send some dummy byte to fetch the response from the slave
			SPI_SendData(SPI2,&dummy_write,1);
 8000d3a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <main+0x348>)
 8000d44:	f7ff fd27 	bl	8000796 <SPI_SendData>

			//read the ack byte received
			SPI_ReceiveData(SPI2,&ackbyte,1);
 8000d48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4807      	ldr	r0, [pc, #28]	; (8000d70 <main+0x348>)
 8000d52:	f7ff fd57 	bl	8000804 <SPI_ReceiveData>

			uint8_t id[11];
			uint32_t i=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
			if( SPI_VerifyResponse(ackbyte))
 8000d5a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fe50 	bl	8000a04 <SPI_VerifyResponse>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d020      	beq.n	8000dac <main+0x384>
			{
				//read 10 bytes id from the slave
				for(  i = 0 ; i < 11 ; i++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d6e:	e018      	b.n	8000da2 <main+0x37a>
 8000d70:	40003800 	.word	0x40003800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	08000e80 	.word	0x08000e80
				{
					//send dummy byte to fetch data from slave
					SPI_SendData(SPI2,&dummy_write,1);
 8000d7c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8000d80:	2201      	movs	r2, #1
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <main+0x3a0>)
 8000d86:	f7ff fd06 	bl	8000796 <SPI_SendData>
					SPI_ReceiveData(SPI2,&id[i],1);
 8000d8a:	f107 0208 	add.w	r2, r7, #8
 8000d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d90:	4413      	add	r3, r2
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <main+0x3a0>)
 8000d98:	f7ff fd34 	bl	8000804 <SPI_ReceiveData>
				for(  i = 0 ; i < 11 ; i++)
 8000d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9e:	3301      	adds	r3, #1
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da4:	2b0a      	cmp	r3, #10
 8000da6:	d9e9      	bls.n	8000d7c <main+0x354>
				}

				id[10] = '\0';
 8000da8:	2300      	movs	r3, #0
 8000daa:	74bb      	strb	r3, [r7, #18]
			}

			//lets confirm SPI is not busy
			while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000dac:	bf00      	nop
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <main+0x3a0>)
 8000db2:	f7ff fcdc 	bl	800076e <SPI_GetFlagStatus>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f8      	bne.n	8000dae <main+0x386>

			//Disable the SPI2 peripheral
			SPI_PeripheralControl(SPI2,DISABLE);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <main+0x3a0>)
 8000dc0:	f7ff fd57 	bl	8000872 <SPI_PeripheralControl>
		{
 8000dc4:	e640      	b.n	8000a48 <main+0x20>
 8000dc6:	bf00      	nop
 8000dc8:	40003800 	.word	0x40003800

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f000 f811 	bl	8000e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fe13 	bl	8000a28 <main>

08000e02 <LoopForever>:

LoopForever:
  b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e10:	08000ea4 	.word	0x08000ea4
  ldr r2, =_sbss
 8000e14:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e18:	2000001c 	.word	0x2000001c

08000e1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <__libc_init_array>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	4d0d      	ldr	r5, [pc, #52]	; (8000e58 <__libc_init_array+0x38>)
 8000e24:	4c0d      	ldr	r4, [pc, #52]	; (8000e5c <__libc_init_array+0x3c>)
 8000e26:	1b64      	subs	r4, r4, r5
 8000e28:	10a4      	asrs	r4, r4, #2
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	42a6      	cmp	r6, r4
 8000e2e:	d109      	bne.n	8000e44 <__libc_init_array+0x24>
 8000e30:	4d0b      	ldr	r5, [pc, #44]	; (8000e60 <__libc_init_array+0x40>)
 8000e32:	4c0c      	ldr	r4, [pc, #48]	; (8000e64 <__libc_init_array+0x44>)
 8000e34:	f000 f818 	bl	8000e68 <_init>
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	10a4      	asrs	r4, r4, #2
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	42a6      	cmp	r6, r4
 8000e40:	d105      	bne.n	8000e4e <__libc_init_array+0x2e>
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e48:	4798      	blx	r3
 8000e4a:	3601      	adds	r6, #1
 8000e4c:	e7ee      	b.n	8000e2c <__libc_init_array+0xc>
 8000e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e52:	4798      	blx	r3
 8000e54:	3601      	adds	r6, #1
 8000e56:	e7f2      	b.n	8000e3e <__libc_init_array+0x1e>
 8000e58:	08000e9c 	.word	0x08000e9c
 8000e5c:	08000e9c 	.word	0x08000e9c
 8000e60:	08000e9c 	.word	0x08000e9c
 8000e64:	08000ea0 	.word	0x08000ea0

08000e68 <_init>:
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	bf00      	nop
 8000e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6e:	bc08      	pop	{r3}
 8000e70:	469e      	mov	lr, r3
 8000e72:	4770      	bx	lr

08000e74 <_fini>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr
